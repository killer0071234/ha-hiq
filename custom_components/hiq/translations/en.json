{
  "config": {
    "error": {
      "already_configured": "HIQ controller is already configured in Home Assistant",
      "cannot_connect": "Failed to connect to scgi server (Is the server running?, Is the server installed?, Is the cybroscgiserver addon installed?)",
      "plc_not_existing": "HIQ controller does not exist in scgi server (Is the address / NAD correct?)",
      "scgi_server_not_running": "scgi server is not running"
    },
    "flow_title": "{name}",
    "step": {
      "user": {
        "data": {
          "host": "scgi server host",
          "port": "scgi server port",
          "address": "HIQ controller address (NAD)"
        },
        "data_description": {
          "host": "scgi server Hostname / IP (for cybroscgiserver addon use '85493909-cybroscgiserver')",
          "port": "scgi server Port (for cybroscgiserver addon use '4000')",
          "address": "HIQ controller address (NAD) (eg: 1000)"
        },
        "description": "Set up your HIQ-Home control to integrate with Home Assistant.\nBefore you continue make sure you had a running cybro scgi server!\nSee integration documentation for details."
      }
    }
  },
  "options": {
    "step": {
      "init": {
        "menu_options": {
          "add_sensor": "Add custom sensor",
          "select_edit_sensor": "Configure custom sensor",
          "remove_sensor": "Remove custom sensor"
        }
      },
      "add_sensor": {
        "description": "Add a custom sensor to read from HIQ controller.",
        "data": {
          "name": "Name",
          "tag": "PLC tag / variable",
          "device_class": "Device Class",
          "state_class": "State Class",
          "unit_of_measurement": "Unit of Measurement",
          "value_template": "Value Template"
        },
        "data_description": {
          "name": "Sensor name",
          "tag": "Defines what tag / variable to to read from the plc. eg: cybro_serial",
          "device_class": "The type/class of the sensor to set the icon in the frontend",
          "state_class": "The state_class of the sensor",
          "unit_of_measurement": "Choose unit of measurement for the sensor (shall match device / state class)",
          "value_template": "Defines a template to get the state of the sensor"
        }
      },
      "edit_sensor": {
        "description": "Add a custom sensor to read from HIQ controller.",
        "data": {
          "name": "Name",
          "tag": "PLC tag / variable",
          "device_class": "Device Class",
          "state_class": "State Class",
          "unit_of_measurement": "Unit of Measurement",
          "value_template": "Value Template"
        },
        "data_description": {
          "name": "Sensor name",
          "tag": "Defines what tag / variable to to read from the plc. eg: cybro_serial",
          "device_class": "The type/class of the sensor to set the icon in the frontend",
          "state_class": "The state_class of the sensor",
          "unit_of_measurement": "Choose unit of measurement for the sensor (shall match device / state class)",
          "value_template": "Defines a template to get the state of the sensor"
        }
      }
    }
  },
  "selector": {
    "sensor_device_class": {
      "options": {
        "apparent_power": "Apparent power",
        "aqi": "Air quality index",
        "atmospheric_pressure": "Atmospheric pressure",
        "battery": "Battery",
        "carbon_dioxide": "Carbon dioxide",
        "carbon_monoxide": "Carbon monoxide",
        "current": "Current",
        "data_rate": "Data rate",
        "data_size": "Data size",
        "date": "Date",
        "distance": "Distance",
        "duration": "Duration",
        "energy": "Energy",
        "energy_storage": "Stored energy",
        "frequency": "Frequency",
        "gas": "Gas",
        "humidity": "Humidity",
        "illuminance": "Illuminance",
        "irradiance": "Irradiance",
        "moisture": "Moisture",
        "monetary": "Balance",
        "nitrogen_dioxide": "Nitrogen dioxide",
        "nitrogen_monoxide": "Nitrogen monoxide",
        "nitrous_oxide": "Nitrous oxide",
        "ozone": "Ozone",
        "ph": "pH",
        "pm1": "PM1",
        "pm10": "PM10",
        "pm25": "PM2.5",
        "power": "Power",
        "power_factor": "Power factor",
        "precipitation": "Precipitation",
        "precipitation_intensity": "Precipitation intensity",
        "pressure": "Pressure",
        "reactive_power": "Reactive power",
        "signal_strength": "Signal strength",
        "sound_pressure": "Sound pressure",
        "speed": "Speed",
        "sulphur_dioxide": "Sulphur dioxide",
        "temperature": "Temperature",
        "timestamp": "Timestamp",
        "volatile_organic_compounds": "VOCs",
        "volatile_organic_compounds_parts": "VOCs",
        "voltage": "Voltage",
        "volume": "Volume",
        "volume_flow_rate": "Volume flow rate",
        "volume_storage": "Stored volume",
        "water": "Water",
        "weight": "Weight",
        "wind_speed": "Wind speed"
      }
    },
    "sensor_state_class": {
      "options": {
        "measurement": "Measurement",
        "total": "Total",
        "total_increasing": "Total increasing"
      }
    },
    "sensor_unit_of_measurement": {
      "options": {
        "none": "No unit of measurement"
      }
    }

  },
  "entity": {
    "binary_sensor": {
      "scan_overrun": {
        "name": "Controller program cycle overrun"
      },
      "retentive_fail": {
        "name": "Controller retentive memory failure"
      },
      "general_error": {
        "name": "General error"
      },
      "general_error_iex": {
        "name": "{module} General error"
      },
      "eno_general_error": {
        "name": "EnOcean general error"
      },
      "output": {
        "name": "Output"
      }
    },
    "button": {
      "config1_write_req": {
        "name": "Config write request"
      },
      "config1_read_req": {
        "name": "Config read request"
      }
    },
    "cover": {
      "blind": {
        "name": "Blind"
      }
    },
    "light": {
      "light": {
        "name": "Light"
      }
    },
    "sensor": {
      "sys_ip_port": {
        "name": "Controller address"
      },
      "scan_time": {
        "name": "Scan time"
      },
      "scan_time_max": {
        "name": "Scan time maximum"
      },
      "cybro_uptime": {
        "name": "Controller uptime"
      },
      "operating_hours": {
        "name": "Controller operation hours"
      },
      "scan_frequency": {
        "name": "Controller program cycles"
      },
      "iex_power_supply": {
        "name": "Iex voltage"
      },
      "iex_power_supply_iex": {
        "name": "{module} iex voltage"
      },
      "cybro_power_supply": {
        "name": "Controller supply voltage"
      },
      "temperature_1": {
        "name": "External temperature"
      },
      "light_sensor": {
        "name": "Light sensor"
      },
      "max_timer_remain": {
        "name": "Max function remain timer"
      },
      "outdoor_temperature": {
        "name": "Outdoor temperature"
      },
      "wall_temperature": {
        "name": "Wall temperature"
      },
      "water_temperature": {
        "name": "Water temperature"
      },
      "auxilary_temperature": {
        "name": "Auxilary temperature"
      }
    },
    "select": {
      "temperature_source": {
        "name": "Temperature source sensor",
        "state": {
          "internal_sensor": "Internal sensor",
          "external_sensor": "External sensor",
          "remote_sensor": "Remote sensor"
        }
      },
      "display_mode": {
        "name": "Display mode",
        "state": {
          "nothing": "Empty display",
          "minus": "---",
          "temperature": "Current temperature"
        }
      },
      "fan_limit": {
        "name": "Fan mode limit",
        "state": {
          "off": "Off",
          "fan1": "Fan speed 1",
          "fan2": "Fan speed 2",
          "fan3": "Fan speed 3",
          "max": "Fan speed max"
        }
      },
      "hvac_mode": {
        "name": "Operation mode hvac",
        "state": {
          "off": "Off",
          "heating": "Heating",
          "cooling": "Cooling"
        }
      }
    },
    "number": {
      "setpoint_idle": {
        "name": "Setpoint eco"
      },
      "setpoint_idle_c": {
        "name": "Setpoint eco cooling"
      },
      "setpoint_idle_h": {
        "name": "Setpoint eco heating"
      },
      "setpoint_offset": {
        "name": "Setpoint offset"
      },
      "setpoint_offset_c": {
        "name": "Setpoint offset cooling"
      },
      "setpoint_offset_h": {
        "name": "Setpoint offset heating"
      },
      "setpoint_lo": {
        "name": "Setpoint min"
      },
      "setpoint_lo_c": {
        "name": "Setpoint min cooling"
      },
      "setpoint_lo_h": {
        "name": "Setpoint min heating"
      },
      "setpoint_hi": {
        "name": "Setpoint max"
      },
      "setpoint_hi_c": {
        "name": "Setpoint max cooling"
      },
      "setpoint_hi_h": {
        "name": "Setpoint max heating"
      },
      "hysteresis": {
        "name": "Hysteresis"
      },
      "hysteresis_c": {
        "name": "Hysteresis cooling"
      },
      "hysteresis_h": {
        "name": "Hysteresis heating"
      },
      "max_temp": {
        "name": "Max temperatur external"
      },
      "max_time": {
        "name": "Activation time max function"
      },
      "max_time_c": {
        "name": "Activation time max function cooling"
      },
      "max_time_h": {
        "name": "Activation time max function heating"
      },
      "setpoint_idle_heating": {
        "name": "Setpoint eco heating"
      },
      "setpoint_lo_heating": {
        "name": "Setpoint min heating"
      },
      "setpoint_hi_heating": {
        "name": "Setpoint max heating"
      },
      "setpoint_idle_cooling": {
        "name": "Setpoint eco cooling"
      },
      "setpoint_lo_cooling": {
        "name": "Setpoint min cooling"
      },
      "setpoint_hi_cooling": {
        "name": "Setpoint max cooling"
      }
    },
    "switch": {
      "window_enable": {
        "name": "Window switch enable"
      },
      "demand_enable": {
        "name": "Demand enable"
      },
      "outdoor_temperature_enable": {
        "name": "Enable outdoor temperature"
      },
      "wall_temperature_enable": {
        "name": "Enable wall temperature"
      },
      "water_temperature_enable": {
        "name": "Enable water temperature"
      },
      "auxilary_temperature_enable": {
        "name": "Enable auxilary temperature"
      },
      "auto_limits_enable": {
        "name": "Enable automatic setpoint limits"
      },
      "hvac_fan_option_b01": {
        "name": "Fan auto speed limit 1"
      },
      "hvac_fan_option_b02": {
        "name": "Fan auto speed limit 2"
      },
      "hvac_fan_option_b03": {
        "name": "Fan auto speed limit 3"
      },
      "hvac_fan_option_b04": {
        "name": "Fan speed limit max"
      }
    }
  }
}